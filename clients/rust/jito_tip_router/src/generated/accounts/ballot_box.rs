//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use solana_program::pubkey::Pubkey;
use crate::generated::types::Ballot;
use crate::generated::types::OperatorVote;
use crate::generated::types::BallotTally;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BallotBox {
pub discriminator: u64,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub ncn: Pubkey,
pub epoch: u64,
pub bump: u8,
pub slot_created: u64,
pub slot_consensus_reached: u64,
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub reserved: [u8; 128],
pub operators_voted: u64,
pub unique_ballots: u64,
pub winning_ballot: Ballot,
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub operator_votes: [OperatorVote; 256],
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub ballot_tallies: [BallotTally; 256],
}


impl BallotBox {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for BallotBox {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for BallotBox {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
      Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for BallotBox {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for BallotBox {
    fn owner() -> Pubkey {
      crate::JITO_TIP_ROUTER_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for BallotBox {}


#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for BallotBox {
<<<<<<< HEAD
  const DISCRIMINATOR: [u8; 8] = [0; 8];
=======
    const DISCRIMINATOR: &'static [u8] = &[0; 8];
>>>>>>> cf534adfb33ea5afa9eccb11b35199f5b149fea2
}

